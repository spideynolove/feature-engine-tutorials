Directory structure:
└── datetime/
    └── DatetimeFeatures.py

================================================
File: DatetimeFeatures.py
================================================
"""
# Datetime variable transformation

The **DatetimeFeatures()** transformer is able to extract many different datetime features from existing datetime variables present in a dataframe. Some of these features are numerical, such as month, year, day of the week, week of the year, etc. and some are binary, such as whether that day was a weekend day or was the last day of its correspondent month. All features are cast to integer before adding them to the dataframe. <br>
DatetimeFeatures() converts datetime variables whose dtype is originally object or categorical to a datetime format, but it does not work with variables whose original dtype is numerical. <br>
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from feature_engine.datetime import DatetimeFeatures
data = pd.read_csv('../data/Metro_Interstate_Traffic_Volume.csv')
data.head()
data.shape
pd.DataFrame({'type': data.dtypes, 'nan count': data.isna().sum()})
dtfs = DatetimeFeatures(variables=None, features_to_extract=['day_of_month',
    'hour'])
dtfs.fit(data)
dtfs.variables_
data_transf = dtfs.transform(data)
data_transf.head()
dtfs = DatetimeFeatures(variables='date_time', features_to_extract=[
    'day_of_month', 'hour'], drop_original=False)
data_transf = dtfs.fit_transform(data)
data_transf.head()
dtfs = DatetimeFeatures(features_to_extract=None)
data_transf = dtfs.fit_transform(data)
data_transf.filter(regex='date_time*').head()
dtfs = DatetimeFeatures(features_to_extract='all')
data_transf = dtfs.fit_transform(data)
data_transf.filter(regex='date_time*').head()
data['holiday'] = data['holiday'].replace({pd.NA: None, pd.NaT: None, np.
    nan: None})
data_for_pipe = data.drop('holiday', axis=1)
from sklearn.pipeline import Pipeline
from feature_engine.selection import DropConstantFeatures
pipe = Pipeline([('datetime_extraction', DatetimeFeatures(
    features_to_extract=['year', 'day_of_month', 'minute', 'second'])), (
    'drop_constants', DropConstantFeatures())])
data_transf = pipe.fit_transform(data_for_pipe)
data_transf.head()


