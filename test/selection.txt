Directory structure:
└── selection/
    ├── Drop-Arbitrary-Features.py
    ├── Drop-Constant-and-QuasiConstant-Features.py
    ├── Drop-Correlated-Features.py
    ├── Drop-Duplicated-Features.py
    ├── Drop-High-PSI-Features.py
    ├── Recursive-Feature-Addition.py
    ├── Recursive-Feature-Elimination.py
    ├── Select-by-Feature-Shuffling.py
    ├── Select-by-MinimumRedundance-MaximumRelevante.py
    ├── Select-by-Single-Feature-Performance.py
    ├── Select-by-Target-Mean-Encoding.py
    ├── Select-Information-Value.py
    └── Smart-Correlation-Selection.py

================================================
File: Drop-Arbitrary-Features.py
================================================



================================================
File: Drop-Constant-and-QuasiConstant-Features.py
================================================



================================================
File: Drop-Correlated-Features.py
================================================
import dcor
import pandas as pd
import warnings
from sklearn.datasets import make_classification
from feature_engine.selection import DropCorrelatedFeatures
warnings.filterwarnings('ignore')
X, _ = make_classification(n_samples=1000, n_features=12, n_redundant=6,
    n_clusters_per_class=1, weights=[0.5], class_sep=2, random_state=1)
colnames = [('var_' + str(i)) for i in range(12)]
X = pd.DataFrame(X, columns=colnames)
X
dcor_tr = DropCorrelatedFeatures(variables=None, method=dcor.
    distance_correlation, threshold=0.8)
X_dcor = dcor_tr.fit_transform(X)
X_dcor
from sklearn.feature_selection import mutual_info_regression


def custom_mi(x, y):
    x = x.reshape(-1, 1)
    y = y.reshape(-1, 1)
    return mutual_info_regression(x, y)[0]


mi_tr = DropCorrelatedFeatures(variables=None, method=custom_mi, threshold=0.8)
X_mi = mi_tr.fit_transform(X)
X_mi



================================================
File: Drop-Duplicated-Features.py
================================================



================================================
File: Drop-High-PSI-Features.py
================================================
"""
# Drop Features with High PSI Value

The **DropHighPSIFeatures** selects features based on the Population Stability Index (PSI). The higher this value, the more unstable a feature. Unstable in this case means that there is a significant change in the distribution of the feature in the groups being compared.

To determine the PSI of a feature, the DropHighPSIFeatures takes a dataframe and splits it in 2 based on a reference variable. This reference variable can be numerical, categorical or date. If the variable is numerical, the split ensures a certain proportion of observations in each sub-dataframe. If the variable is categorical, we can split the data based on the categories. And if the variable is a date, we can split the data based on dates.
"""
from datetime import date
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from feature_engine.selection import DropHighPSIFeatures
data = pd.read_csv('../data/credit+approval/crx.data', header=None)
data.columns = [('A' + str(s)) for s in range(1, 17)]
data = data.replace('?', np.nan)
data['A2'] = data['A2'].astype('float')
data['A14'] = data['A14'].astype('float')
data['A16'] = data['A16'].map({'+': 1, '-': 0})
data.head()
data['A13'] = data['A13'].map({'g': 'portfolio_1', 's': 'portfolio_2', 'p':
    'portfolio_3'})
data['A13'].fillna('Unknown', inplace=True)
data['A12'] = data['A12'].map({'f': 'wholesale', 't': 'retail'})
data['A12'].fillna('Missing', inplace=True)
data['A6'].fillna('Missing', inplace=True)
labels = {'w': '20-25', 'q': '25-30', 'm': '30-35', 'r': '35-40', 'cc':
    '40-45', 'k': '45-50', 'c': '50-55', 'd': '55-60', 'x': '60-65', 'i':
    '65-70', 'e': '70-75', 'aa': '75-80', 'ff': '85-90', 'j': 'Unknown',
    'Missing': 'Missing'}
data['A6'] = data['A6'].map(labels)
data['date'] = pd.date_range(start='1/1/2018', periods=len(data))
data.head()
vars_cat = data.select_dtypes(include='O').columns.to_list()
vars_cat
for var in vars_cat:
    data[var].value_counts(normalize=True).plot.bar()
    plt.title(var)
    plt.ylabel('% observations')
    plt.show()
vars_num = data.select_dtypes(exclude='O').columns.to_list()
vars_num.remove('A16')
vars_num.remove('date')
vars_num
for var in vars_num:
    data[var].hist(bins=50)
    plt.title(var)
    plt.ylabel('Number observations')
    plt.show()
X_train, X_test, y_train, y_test = train_test_split(data[vars_cat +
    vars_num], data['A16'], test_size=0.1, random_state=42)
transformer = DropHighPSIFeatures(split_frac=0.6, split_col=None, strategy=
    'equal_frequency', threshold=0.1, variables=vars_num, missing_values=
    'ignore')
transformer.fit(X_train)
transformer.cut_off_
transformer.threshold
transformer.psi_values_
transformer.features_to_drop_
tmp = X_train.index <= transformer.cut_off_
sns.ecdfplot(data=X_train, x='A8', hue=tmp)
plt.title('A8 - moderate PSI')
sns.ecdfplot(data=X_train, x='A2', hue=tmp)
plt.title('A2 - low PSI')
X_train.shape, X_test.shape
X_train = transformer.transform(X_train)
X_test = transformer.transform(X_test)
X_train.shape, X_test.shape
X_train, X_test, y_train, y_test = train_test_split(data[vars_cat +
    vars_num], data['A16'], test_size=0.1, random_state=42)
transformer = DropHighPSIFeatures(split_frac=0.5, split_col='A6', strategy=
    'equal_frequency', bins=8, threshold=0.1, variables=None,
    missing_values='ignore')
transformer.fit(X_train)
transformer.variables_
transformer.cut_off_
transformer.psi_values_
transformer.features_to_drop_
tmp = X_train['A6'] <= transformer.cut_off_
sns.ecdfplot(data=X_train, x='A8', hue=tmp)
plt.title('A8 - low PSI')
sns.ecdfplot(data=X_train, x='A15', hue=tmp)
plt.title('A15 - low PSI')
X_train[tmp]['A6'].unique()
X_train[tmp]['A6'].nunique()
len(X_train[tmp]['A6']) / len(X_train)
X_train[~tmp]['A6'].unique()
X_train[~tmp]['A6'].nunique()
len(X_train[~tmp]['A6']) / len(X_train)
X_train.shape, X_test.shape
X_train = transformer.transform(X_train)
X_test = transformer.transform(X_test)
X_train.shape, X_test.shape
X_train, X_test, y_train, y_test = train_test_split(data[vars_cat +
    vars_num], data['A16'], test_size=0.1, random_state=42)
transformer = DropHighPSIFeatures(split_frac=0.5, split_distinct=True,
    split_col='A6', strategy='equal_frequency', bins=5, threshold=0.1,
    missing_values='ignore')
transformer.fit(X_train)
transformer.cut_off_
transformer.psi_values_
transformer.features_to_drop_
tmp = X_train['A6'] <= transformer.cut_off_
sns.ecdfplot(data=X_train, x='A8', hue=tmp)
plt.title('A8 - high PSI')
sns.ecdfplot(data=X_train, x='A15', hue=tmp)
plt.title('A15 - low PSI')
X_train[tmp]['A6'].unique()
X_train[tmp]['A6'].nunique()
len(X_train[tmp]['A6']) / len(X_train)
X_train[~tmp]['A6'].unique()
X_train[~tmp]['A6'].nunique()
len(X_train[~tmp]['A6']) / len(X_train)
X_train.shape, X_test.shape
X_train = transformer.transform(X_train)
X_test = transformer.transform(X_test)
X_train.shape, X_test.shape
X_train, X_test, y_train, y_test = train_test_split(data[vars_cat +
    vars_num], data['A16'], test_size=0.1, random_state=42)
transformer = DropHighPSIFeatures(cut_off=['portfolio_2', 'portfolio_3'],
    split_col='A13', strategy='equal_width', bins=5, threshold=0.1,
    variables=vars_num, missing_values='ignore')
transformer.fit(X_train)
transformer.cut_off_
transformer.psi_values_
transformer.features_to_drop_
tmp = X_train['A13'].isin(transformer.cut_off_)
sns.ecdfplot(data=X_train, x='A3', hue=tmp)
plt.title('A3 - high PSI')
sns.ecdfplot(data=X_train, x='A11', hue=tmp)
plt.title('A11 - high PSI')
sns.ecdfplot(data=X_train, x='A2', hue=tmp)
plt.title('A2 - high PSI')
X_train.shape, X_test.shape
X_train = transformer.transform(X_train)
X_test = transformer.transform(X_test)
X_train.shape, X_test.shape
data['date'].agg(['min', 'max'])
X_train, X_test, y_train, y_test = train_test_split(data[vars_cat +
    vars_num + ['date']], data['A16'], test_size=0.1, random_state=42)
transformer = DropHighPSIFeatures(cut_off=pd.to_datetime('2018-12-14'),
    split_col='date', strategy='equal_frequency', bins=8, threshold=0.1,
    missing_values='ignore')
transformer.fit(X_train)
transformer.cut_off_
transformer.psi_values_
transformer.features_to_drop_
tmp = X_train['date'] <= transformer.cut_off_
sns.ecdfplot(data=X_train, x='A3', hue=tmp)
plt.title('A3 - moderate PSI')
sns.ecdfplot(data=X_train, x='A14', hue=tmp)
X_train.shape, X_test.shape
X_train = transformer.transform(X_train)
X_test = transformer.transform(X_test)
X_train.shape, X_test.shape



================================================
File: Recursive-Feature-Addition.py
================================================



================================================
File: Recursive-Feature-Elimination.py
================================================



================================================
File: Select-by-Feature-Shuffling.py
================================================



================================================
File: Select-by-MinimumRedundance-MaximumRelevante.py
================================================
# Generated from: Select-by-MinimumRedundance-MaximumRelevante.ipynb

# MRMR Feature Selection by Maykon Schots & Matheus Rugollo


# <h1> Numerical Feature Selection by MRMR </h1>
# <hr></hr>
#
# Experimenting fast is key to success in Data Science. When experimenting we're going to bump with huge datasets that require special attention when feature selecting and engineering. In a profit driven context, it's important to quickly test the potential value of an idea rather than exploring the best way to use your data or parametrize a machine learning model. It not only takes time that we usually can't afford but also increase financial costs. 
#
# Herewit we describe an efficient solution to reduce dimensionality of your dataset, by identifying and creating clusters of redundant features and selecting the most relevant one. This has potential to speed up your experimentation process and reduce costs.</p>
#
# <hr></hr>
# <h5>Case</h5>
#
# You might be wondering how this applies to a real use case and why we had to come up with such technique. Hear this story:
# Consider a project in a financial company that we try to understand how likely a client is to buy a product through Machine Learning. Other then profile features, we usually end up with many financial transactions history features of the clients. With that in mind we can assume that probably many of them are highly correlated, e.g in order to buy something of x value, the client probably received a value > x in the past, and since we're going to extract aggregation features from such events we're going to end up with a lot of correlation between them. 
#
#
# The solution was to come up with an efficient "automatic" way to wipe redundant features from the training set, that can vary from time to time, maintaining our model performance. With this we can always consider at the start of our pipeline all of our "raw" features and select the most relevant of them that are not highly correlated in given moment.
#
# Based on a published [article](https://arxiv.org/abs/1908.05376) we developed an implementation using [feature_engine](https://github.com/feature-engine/feature_engine) and [sklearn](https://scikit-learn.org/stable/). Follow the step-by-step to understand our approach.


# <h3> Classification Example </h3>
# <hr>
#
# In order to demonstrate, use the [make_classification](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_classification.html) helper function from sklearn  to create a set of features making sure that some of them are redundant. Convert both X and y returned by it to be pandas DataFrames for further compatibility with sklearn api.


import warnings

import pandas as pd
from sklearn.datasets import make_classification

warnings.filterwarnings('ignore')

X, y = make_classification(
    n_samples=5000,
    n_features=30,
    n_redundant=15,
    n_clusters_per_class=1,
    weights=[0.50],
    class_sep=2,
    random_state=42
)

cols = []
for i in range(len(X[0])):
   cols.append(f"feat_{i}")
X = pd.DataFrame(X, columns=cols)
y = pd.DataFrame({"y": y})



X.head()


# <h4>Get Redundant Clusters</h4>
# <hr></hr>
#
# Now that we have our master table example set up, we can start by taking advantage of [SmartCorrelatedSelection](https://feature-engine.readthedocs.io/en/1.0.x/selection/SmartCorrelatedSelection.html) implementation by feature_egine. Let's check it's parameters:
#
# <h5>Correlation Threshold </h5>
# This can be a hot topic of discussion for each case, in order to keep as much useful data as possible the correlation threshold set was very conservative .97. 
# p.s: This demonstration will only have one value set, but a good way of improving this pipeline would be to attempt multiple iterations lowering the threshold, then you could measure performance of given model with different sets of selected features.
#
# <h5>Method</h5>
# The best option here was spearman, identifying both linear and non-linear numerical features correlated clusters to make it less redundant as possible through rank correlation threshold.
#
# <h5>Selection Method</h5>
# This is not relevant for this implementation, because we're not going to use features selected by the SmartCorrelatedSelection. Use variance , it's faster.
#
#
# <hr></hr>
# <h6>Quick Comment</h6>
# You might be wondering why we don't just use feature_engine methods, and we definitely considered and tried it, finally it inspired us to come up with some tweaks for our process. It's a very similar idea, but instead of variance we use mutual information to select one feature out of each cluster, it's also the ground work for optimal parametrization and further development of the pipeline for ad hoc usage.


from feature_engine.selection import SmartCorrelatedSelection


MODEL_TYPE = "classifier" ## Or "regressor"
CORRELATION_THRESHOLD = .97

# Setup Smart Selector /// Tks feature_engine
feature_selector = SmartCorrelatedSelection(
    variables=None,
    method="spearman",
    threshold=CORRELATION_THRESHOLD,
    missing_values="ignore",
    selection_method="variance",
    estimator=None,
)


feature_selector.fit_transform(X)

### Setup a list of correlated clusters as lists and a list of uncorrelated features
correlated_sets = feature_selector.correlated_feature_sets_

correlated_clusters = [list(feature) for feature in correlated_sets]

correlated_features = [feature for features in correlated_clusters for feature in features]

uncorrelated_features = [feature for feature in X if feature not in correlated_features]



# <h4>Wiping Redundancy considering Relevance</h4>
#
# Now we're going to extract the best feature from each correlated cluster using [SelectKBest](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectKBest.html) from sklearn.feature_selection. Here we use [mutual_info_classif](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.mutual_info_classif.html#sklearn.feature_selection.mutual_info_classif) implementation as our score_func for this classifier example, there are other options like mutual_info_regression be sure to select it according to your use case.
#
# The relevance of each selected feature is considered when we use mutual info of the samples against the target Y, this will be important so we do not lose any predictive power of our features.
#
# <hr></hr>
#
# We end up with a set of selected features that considering our correlation threshold of .97, probably will have similar performance. In a context where you want to prioritize reduction of dimensionality, you can check how the selection will perform to make a good decision about it.
#
# I don't want to believe, I want to know.


from sklearn.feature_selection import (
    SelectKBest,
    mutual_info_classif,
    mutual_info_regression,
)


mutual_info = {
    "classifier": mutual_info_classif,
    "regressor": mutual_info_regression,
}

top_features_cluster = []
for cluster in correlated_clusters:
            selector = SelectKBest(score_func=mutual_info[MODEL_TYPE], k=1)  # selects the top feature (k=1) regarding target mutual information
            selector = selector.fit(X[cluster], y)
            top_features_cluster.append(
                list(selector.get_feature_names_out())[0]
            )

selected_features = top_features_cluster + uncorrelated_features


# <h4>Evaluating the set of features</h4>
#
# Now that we have our set it's time to decide if we're going with it or not. In this demonstration, the idea was to use a GridSearch to find the best hyperparameters for a RandomForestClassifier providing us with the best possible estimator. 
#
# If we attempt to fit many grid searches in a robust way, it would take too long and be very costy. Since we're just experimenting, initally we can use basic cross_validate with the chosen estimator, and we can quickly discard "gone wrong" selections, specially when we lower down our correlation threshold for the clusters.
#
# It's an efficient way to approach experimenation with this method, although I highly recommend going for a more robust evaluation with grid searches or other approaches, and a deep discussion on the impact of the performance threshold for your use cause, sometimes 1% can be a lot of $.


import os
import multiprocessing

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import StratifiedKFold, cross_validate


cv = StratifiedKFold(shuffle=True, random_state=42)

baseline_raw = cross_validate(
    RandomForestClassifier(
        max_samples=1.0,
        n_jobs=int(os.getenv("N_CORES", 0.50 * multiprocessing.cpu_count())), # simplifica isso aqui pro artigo, bota -1.
        random_state=42
    ),
    X,
    y,
    cv=cv,
    scoring="f1", # or any other metric that you want.
    groups=None
)

baseline_selected_features = cross_validate(
            RandomForestClassifier(),
            X[selected_features],
            y,
            cv=cv,
            scoring="f1",
            groups=None,
            error_score="raise",
        )

score_raw = baseline_raw["test_score"].mean()
score_baseline = baseline_selected_features["test_score"].mean()

# Define a threshold to decide whether to reduce or not the dimensionality for your test case
dif = round(((score_raw - score_baseline) / score_raw), 3)

# 5% is our limit (ponder how it will impact your product $)
performance_threshold = -0.050

if dif >= performance_threshold:
    print(f"It's worth to go with the selected set =D")
elif dif < performance_threshold:
    print(f"The performance reduction is not acceptable!!!! >.<")



# <h2> Make it better ! </h2>
#
# <p> Going Further on implementing a robust feature selection with MRMR , we can use the process explained above to iterate over a range of threshold and choose what's best for our needs instead of a simple score performance evaluation! </p>


# Repeat df from example.

import warnings

import pandas as pd
from sklearn.datasets import make_classification

warnings.filterwarnings('ignore')

X, y = make_classification(
    n_samples=5000,
    n_features=30,
    n_redundant=15,
    n_clusters_per_class=1,
    weights=[0.50],
    class_sep=2,
    random_state=42
)

cols = []
for i in range(len(X[0])):
   cols.append(f"feat_{i}")
X = pd.DataFrame(X, columns=cols)
y = pd.DataFrame({"y": y})



# Functions to iterate over accepted threshold
from sklearn.feature_selection import (
    SelectKBest,
    mutual_info_classif,
    mutual_info_regression,
)
import os
import multiprocessing

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import StratifiedKFold, cross_validate

import pandas as pd
from feature_engine.selection import SmartCorrelatedSelection


def select_features_clf(X: pd.DataFrame, y: pd.DataFrame, corr_threshold: float) -> list:
    """ Function will select a set of features with minimum redundance and maximum relevante based on the set correlation threshold """
    # Setup Smart Selector /// Tks feature_engine
    feature_selector = SmartCorrelatedSelection(
        variables=None,
        method="spearman",
        threshold=corr_threshold,
        missing_values="ignore",
        selection_method="variance",
        estimator=None,
    )
    feature_selector.fit_transform(X)
    ### Setup a list of correlated clusters as lists and a list of uncorrelated features
    correlated_sets = feature_selector.correlated_feature_sets_
    correlated_clusters = [list(feature) for feature in correlated_sets]
    correlated_features = [feature for features in correlated_clusters for feature in features]
    uncorrelated_features = [feature for feature in X if feature not in correlated_features]
    top_features_cluster = []
    for cluster in correlated_clusters:
                selector = SelectKBest(score_func=mutual_info_classif, k=1)  # selects the top feature (k=1) regarding target mutual information
                selector = selector.fit(X[cluster], y)
                top_features_cluster.append(
                    list(selector.get_feature_names_out())[0]
                )
    return top_features_cluster + uncorrelated_features

def get_clf_model_scores(X: pd.DataFrame, y: pd.DataFrame, scoring: str, selected_features:list):
    """ """
    cv = StratifiedKFold(shuffle=True, random_state=42) 
    model_result = cross_validate(
        RandomForestClassifier(),
        X[selected_features],
        y,
        cv=cv,
        scoring=scoring,
        groups=None,
        error_score="raise",
    )
    return model_result["test_score"].mean(), model_result["fit_time"].mean(), model_result["score_time"].mean()

def evaluate_clf_feature_selection_range(X: pd.DataFrame, y: pd.DataFrame, scoring:str, corr_range: int, corr_starting_point: float = .98) -> pd.DataFrame:
    """ Evaluates feature selection for every .01 on corr threshold """
    evaluation_data = {
        "corr_threshold": [],
        scoring: [],
        "n_features": [],
        "fit_time": [],
        "score_time": []
    }
    for i in range(corr_range):
        current_corr_threshold = corr_starting_point - (i / 100) ## Reduces .01 on corr_threshold for every iteration
        selected_features = select_features_clf(X, y, corr_threshold=current_corr_threshold)
        score, fit_time, score_time = get_clf_model_scores(X, y, scoring, selected_features)
        evaluation_data["corr_threshold"].append(current_corr_threshold)
        evaluation_data[scoring].append(score)
        evaluation_data["n_features"].append(len(selected_features))
        evaluation_data["fit_time"].append(fit_time)
        evaluation_data["score_time"].append(score_time)
        
    return pd.DataFrame(evaluation_data)



evaluation_df = evaluate_clf_feature_selection_range(X, y, "f1", 15)


%pip install hiplot


import hiplot
from IPython.display import HTML

# html = hiplot.Experiment.from_dataframe(evaluation_df).to_html()
# displayHTML(html)

exp = hiplot.Experiment.from_dataframe(evaluation_df)
HTML(exp.to_html())




================================================
File: Select-by-Single-Feature-Performance.py
================================================
"""
## Univariate Single Performance

- Train a ML model per every single feature
- Determine the performance of the models
- Select features if model performance is above a certain threshold
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import roc_auc_score, mean_squared_error
from feature_engine.selection import SelectBySingleFeaturePerformance
data.head()
X_train, X_test, y_train, y_test = train_test_split(data.drop(labels=[
    'target'], axis=1), data['target'], test_size=0.3, random_state=0)
X_train.shape, X_test.shape
rf = RandomForestClassifier(n_estimators=10, random_state=1, n_jobs=4)
sel = SelectBySingleFeaturePerformance(variables=None, estimator=rf,
    scoring='roc_auc', cv=3, threshold=0.5)
sel.fit(X_train, y_train)
sel.feature_performance_
pd.Series(sel.feature_performance_).sort_values(ascending=False).plot.bar(
    figsize=(20, 5))
plt.title('Performance of ML models trained with individual features')
plt.ylabel('roc-auc')
len(sel.features_to_drop_)
X_train = sel.transform(X_train)
X_test = sel.transform(X_test)
X_train.shape, X_test.shape
data = pd.read_csv('../houseprice.csv')
data.shape
numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
numerical_vars = list(data.select_dtypes(include=numerics).columns)
data = data[numerical_vars]
data.shape
data.head()
data.fillna(0, inplace=True)
X_train, X_test, y_train, y_test = train_test_split(data.drop(labels=['Id',
    'SalePrice'], axis=1), data['SalePrice'], test_size=0.3, random_state=0)
X_train.shape, X_test.shape
rf = RandomForestRegressor(n_estimators=10, max_depth=2, random_state=1,
    n_jobs=4)
sel = SelectBySingleFeaturePerformance(variables=None, estimator=rf,
    scoring='r2', cv=3, threshold=0.5)
sel.fit(X_train, y_train)
sel.feature_performance_
pd.Series(sel.feature_performance_).sort_values(ascending=False).plot.bar(
    figsize=(20, 5))
plt.title('Performance of ML models trained with individual features')
plt.ylabel('r2')
np.abs(pd.Series(sel.feature_performance_)).sort_values(ascending=False
    ).plot.bar(figsize=(20, 5))
plt.title('Performance of ML models trained with individual features')
plt.ylabel('r2 - absolute value')
len(sel.features_to_drop_)
X_train = sel.transform(X_train)
X_test = sel.transform(X_test)
X_train.shape, X_test.shape
X_train, X_test, y_train, y_test = train_test_split(data.drop(labels=['Id',
    'SalePrice'], axis=1), data['SalePrice'], test_size=0.3, random_state=0)
X_train.shape, X_test.shape
rf = RandomForestRegressor(n_estimators=10, max_depth=2, random_state=1,
    n_jobs=4)
sel = SelectBySingleFeaturePerformance(variables=None, estimator=rf,
    scoring='neg_mean_squared_error', cv=3, threshold=None)
sel.fit(X_train, y_train)
sel.feature_performance_
pd.Series(sel.feature_performance_).sort_values(ascending=False).plot.bar(
    figsize=(20, 5))
plt.title('Performance of ML models trained with individual features')
plt.ylabel('Negative mean Squared Error')
sel.features_to_drop_
pd.Series(sel.feature_performance_)[sel.features_to_drop_].sort_values(
    ascending=False).plot.bar(figsize=(20, 5))



================================================
File: Select-by-Target-Mean-Encoding.py
================================================
"""
## Select with Target Mean as Performance Proxy

**Method used in a KDD 2009 competition**

This feature selection approach was used by data scientists at the University of Melbourne in the [KDD 2009](http://www.kdd.org/kdd-cup/view/kdd-cup-2009) data science competition. The task consisted in predicting churn based on a dataset with a huge number of features.

The authors describe this procedure as an aggressive non-parametric feature selection procedure that is based in contemplating the relationship between the feature and the target.


**The procedure consists in the following steps**:

For each categorical variable:

    1) Separate into train and test

    2) Determine the mean value of the target within each label of the categorical variable using the train set

    3) Use that mean target value per label as the prediction (using the test set) and calculate the roc-auc.

For each numerical variable:

    1) Separate into train and test
    
    2) Divide the variable intervals

    3) Calculate the mean target within each interval using the training set 

    4) Use that mean target value / bin as the prediction (using the test set) and calculate the roc-auc


The authors quote the following advantages of the method:

- Speed: computing mean and quantiles is direct and efficient
- Stability respect to scale: extreme values for continuous variables do not skew the predictions
- Comparable between categorical and numerical variables
- Accommodation of non-linearities

**Important**
The authors here use the roc-auc, but in principle, we could use any metric, including those valid for regression.

The authors sort continuous variables into percentiles, but Feature-engine gives the option to sort into equal-frequency or equal-width intervals.
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
from feature_engine.selection import SelectByTargetMeanPerformance
data = pd.read_csv('https://www.openml.org/data/get_csv/16826755/phpMYEkMl')
data.drop(labels=['name', 'boat', 'ticket', 'body', 'home.dest'], axis=1,
    inplace=True)
data = data.replace('?', np.nan)
data.dropna(subset=['embarked', 'fare'], inplace=True)
data['age'] = data['age'].astype('float')
data['age'] = data['age'].fillna(data['age'].mean())
data['fare'] = data['fare'].astype('float')


def get_first_cabin(row):
    try:
        return row.split()[0]
    except:
        return 'N'


data['cabin'] = data['cabin'].apply(get_first_cabin)
data.head()
data['cabin'] = data['cabin'].str[0]
data['cabin'] = np.where(data['cabin'].isin(['T', 'G']), 'N', data['cabin'])
data['cabin'].unique()
data.dtypes
data['parch'].value_counts()
data['parch'] = np.where(data['parch'] > 3, 3, data['parch'])
data['sibsp'].value_counts()
data['sibsp'] = np.where(data['sibsp'] > 3, 3, data['sibsp'])
data[['pclass', 'sibsp', 'parch']] = data[['pclass', 'sibsp', 'parch']].astype(
    'O')
data.isnull().sum()
X_train, X_test, y_train, y_test = train_test_split(data.drop(['survived'],
    axis=1), data['survived'], test_size=0.3, random_state=0)
X_train.shape, X_test.shape
sel = SelectByTargetMeanPerformance(variables=None, scoring='roc_auc_score',
    threshold=0.6, bins=3, strategy='equal_frequency', cv=2, random_state=1)
sel.fit(X_train, y_train)
sel.variables_categorical_
sel.variables_numerical_
sel.feature_performance_
sel.features_to_drop_
X_train = sel.transform(X_train)
X_test = sel.transform(X_test)
X_train.shape, X_test.shape

================================================
File: Select-Information-Value.py
================================================

# SelectByInformationValue
from feature_engine.selection import SelectByInformationValue
from sklearn.datasets import make_classification
import pandas as pd

X, y = make_classification(n_samples=1000, n_features=10)
X = pd.DataFrame(X, columns=[f'feat_{i}' for i in range(10)])
y = pd.Series(y).map({0: 'A', 1: 'B'})
selector = SelectByInformationValue(
    bins=5,
    strategy="equal_frequency",
    threshold=0.1,
)
selector

X_filtered = selector.fit_transform(X, y)

================================================
File: Smart-Correlation-Selection.py
================================================
"""
## Custom methods in `SmartCorrelatedSelection`

In this tutorial we show how to pass a custom method to `SmartCorrelatedSelection` using the association measure [Distance Correlation](https://m-clark.github.io/docs/CorrelationComparison.pdf) from the python package [dcor](https://dcor.readthedocs.io/en/latest/index.html). Install `dcor` before starting the tutorial

```
!pip install dcor
```
"""
import pandas as pd
import dcor
import warnings
from sklearn.datasets import make_classification
from feature_engine.selection import SmartCorrelatedSelection
warnings.filterwarnings('ignore')
X, _ = make_classification(n_samples=1000, n_features=12, n_redundant=6,
    n_clusters_per_class=1, weights=[0.5], class_sep=2, random_state=1)
colnames = [('var_' + str(i)) for i in range(12)]
X = pd.DataFrame(X, columns=colnames)
dcor_tr = SmartCorrelatedSelection(variables=None, method=dcor.
    distance_correlation, threshold=0.75, missing_values='raise',
    selection_method='variance', estimator=None)
X_dcor = dcor_tr.fit_transform(X)
X_dcor
from sklearn.feature_selection import mutual_info_regression


def custom_mi(x, y):
    x = x.reshape(-1, 1)
    y = y.reshape(-1, 1)
    return mutual_info_regression(x, y)[0]


mi_tr = SmartCorrelatedSelection(variables=None, method=custom_mi,
    threshold=0.75, missing_values='raise', selection_method='variance',
    estimator=None)
X_mi = mi_tr.fit_transform(X)
X_mi


